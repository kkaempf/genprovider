#!/usr/bin/env ruby
#
# genprovider
#
#  Generate Ruby provider templates for use with cmpi-bindings
#
# == Usage
#
# genprovider [-d] [-h] [-q] [-n <namespace>] [-I <includedir>] [-o <output>] <moffile> [<moffile> ...]
#
# -d:
#   turn on debugging
# -h:
#   show (this) help
# -q:
#   be quiet
# -I <includedir>
#   additional include directories to search
# -o <outputdir>
#   directory to write generated files, defaults to 'generated'
# <moffile>
#   .mof files to read
#

require 'rubygems'
require 'rdoc/usage'

require 'mof'
require 'pathname'
require 'fileutils'

$:.push(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'genprovider'

module CIM
  class Class
    attr_accessor :parent
  end
end

class String
  def decamelize
    # CamelCase -> under_score
    self.gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
	 gsub(/([a-z\d])([A-Z])/,'\1_\2').
	 tr("-", "_").
	 downcase
  end
end

cim_current = "/usr/share/mof/cim-current"

moffiles, options = MOF::Parser.argv_handler "genprovider", ARGV
if moffiles.empty?
  $stderr.puts "No .mof files given"
  exit 1
end
if options[:namespace].nil? || options[:namespace].empty?
  $stderr.puts "** skipping registration"
  $stderr.puts "   Provide a namespace (-n <namespace>) to generate registration file"
end
#RDoc::usage 

options[:style] ||= :cim;
options[:includes] ||= []
options[:includes].unshift(Pathname.new ".")
options[:includes].unshift(Pathname.new cim_current)

Dir.new(cim_current).each do |d|
  next if d[0,1] == "."
  fullname = File.join(cim_current, d)
  next unless File.stat(fullname).directory?
  options[:includes].unshift(Pathname.new fullname)
end

moffiles.unshift "qualifiers.mof" unless moffiles.include? "qualifiers.mof"
qualifiers_optional = "qualifiers_optional.mof"
unless moffiles.include? qualifiers_optional
  moffiles.unshift qualifiers_optional if File.readable?(File.join(cim_current, qualifiers_optional))
end

parser = MOF::Parser.new options

begin
  result = parser.parse moffiles
rescue Exception => e
  parser.error_handler e
  exit 1
end

exit 0 unless result

#
# collect classes to find parent classes
#
classes = {}
result.each do |name, res|
  res.classes.each do |c|
    classes[c.name] = c unless classes.has_key? c.name
  end
end

classes.each_value do |c|
  next unless c.superclass
  next if classes.has_key? c.superclass
  # parent unknown
  #  try parent.mof
  begin
    parser = MOF::Parser.new options
    result = parser.parse ["qualifiers.mof", "#{c.superclass}.mof"]
    if result
      result.each_value do |r|
	r.classes.each do |parent|
	  if parent.name == c.superclass
	    c.parent = parent
	    classes[parent.name] = parent
	  end
	end
      end
    else
      $stderr.puts "Warn: Parent #{c.superclass} of #{c.name} not known"
    end
  rescue Exception => e
    parser.error_handler e
  end
end

outdir = options[:output] || "generated"
Dir.mkdir outdir rescue Errno::EEXIST

classes.each_value do |c|
  dcname = c.name.decamelize
  Genprovider::Output.new File.join(outdir,"#{dcname}.rb"), options[:force] do |out|
    Genprovider::Class.new c, out
    # don't create providers for abstract base classes
  end
  next if c.name =~ /^CIM_/
  
  providerprop = c.qualifiers["provider", :string]
  providername = (providerprop ? providerprop.value.sub("cmpi:","").capitalize : c.name) + "Provider"
  Genprovider::Output.new File.join(outdir,"#{providername.decamelize}.rb"), options[:force] do |out|
    Genprovider::Provider.new c, providername, out
  end
  if options[:namespace]
    Genprovider::Output.new File.join(outdir,"#{dcname}.registration"), options[:force] do |out|
      Genprovider::Registration.new c, options[:namespace], providername, out
    end
  end
end
