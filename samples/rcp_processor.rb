#
# Generated by genprovider
#
require 'cmpi'
require 'socket'

module Cmpi
  #
  # Realisation of CIM_Processor in Ruby
  #
  d = File.dirname(__FILE__)
  $: << d unless $:.include? d
  require 'cim_processor'
  #
  # Key properties:
  # - string SystemCreationClassName (-> CIM_LogicalDevice)
  # - string SystemName (-> CIM_LogicalDevice)
  # - string CreationClassName (-> CIM_LogicalDevice)
  # - string DeviceID (-> CIM_LogicalDevice)
  #
  class RCP_Processor < CIM_Processor
    private
    #
    # read /proc/cpuinfo, return list of hashes
    # if attrs set, filter attributes
    #
    def self.read_cpuinfo attrs = nil
      attrs = attrs.to_a if attrs
      cpus = []
      File.open("/proc/cpuinfo") do |f|
	cpu = nil
	while l = f.gets
	  k,v = l.split ":"
	  next unless v
	  k.strip!
	  v.strip!
	  if k == "processor" # start of new entry
	    cpus << cpu if cpu
	    cpu = { k => v }
	  else
	    if attrs.nil? || attrs.include?(k)
	      cpu[k] = v
	    end
	  end
	end
	cpus << cpu if cpu
      end
      cpus
    end
    
    #
    # Generate 'name' (aka reference)
    # cpu : Hash from read_cpuinfo
    #
    def self.gen_name_from reference, cpu
      did = reference[:DeviceID]
      if did && did.to_i != cpu["processor"].to_i
	return nil
      end
      ref = CMPIObjectPath.new reference.inspect
      ref[:SystemCreationClassName] = "RCP_Processor"
      ref[:SystemName] = Socket.gethostbyname(Socket.gethostname).first
      ref[:CreationClassName] = "RCP_Processor"
      ref[:DeviceID] = cpu["processor"]
      ref
    end
    public
    # each_name: yield references with sufficient information to retrieve
    # instances
    def self.each_name( reference, properties = nil )
      self.read_cpuinfo("processor").each do |cpu|
	ref = self.gen_name_from reference, cpu
	next unless ref
	yield ref
      end
    end
    # each: yield references with full information to create instances
    def self.each( reference, properties = nil )
      self.read_cpuinfo.each do |cpu|
	ref = self.gen_name_from reference, cpu
	next unless ref
	ref[:role] = "CPU"
	ref[:family] = cpu["cpu family"].to_i
	ref[:current_clock_speed] = ref[:max_clock_speed] = cpu["cpu MHz"].to_i
	yield ref
      end
    end
    def initialize( reference, properties )
      super reference,properties
    end
  end
end
